// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" //참조 무결성 => 다른 모델을 참조하는 경우 해당 모델이 반드시 존재해야 함
}

model User{
  id              Int        @id @default(autoincrement())
  phone           String?    @unique
  email           String?    @unique
  name            String
  avatar          String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  tokens          Token[]
  items           Items[]
  posts           Post[]
  answers         Answer[]
  wonders         Wonder[]
  writtenReviews  Review[]   @relation(name: "writtenReviews")
  receivedReviews Review[]   @relation(name: "receivedReviews")
  sales           Sale[]
  purchases       Purchase[]
  favorite        Favorite[]
  record          Record[]
}

model Token{
  id         Int       @id @default(autoincrement())
  token      String    @unique
  user       User      @relation(fields:[userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     Int
  @@index([userId])
}


model Items{
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId       Int
  @@index([userId])
  image        String
  name         String
  price        Int
  description  String    @db.MediumText
  favorite     Favorite[]
  sales        Sale[]
  purchases    Purchase[]
  records      Record[]
}

model Favorite {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId       Int
  item         Items     @relation(fields: [itemId], references:[id], onDelete: Cascade)
  itemId       Int
  @@index([userId])
  @@index([itemId])
}

model Post {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId       Int
  question     String    @db.MediumText
  latitude     Float?
  longitude    Float?
  @@index([userId])
  answers      Answer[]
  wonder       Wonder[]
}

model Answer {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId       Int
  @@index([userId])
  post         Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       Int
  @@index([postId])
  answer       String    @db.MediumText
}

model Wonder {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId       Int
  @@index([userId])
  post         Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       Int
  @@index([postId])
}

model Review {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  review       String    @db.MediumText
  createdBy    User      @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  @@index([createdById])
  createdFor   User      @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  @@index([createdForId])
}

model Sale {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId       Int
  item         Items     @relation(fields: [itemId], references:[id], onDelete: Cascade)
  itemId       Int
  @@index([userId])
  @@index([itemId])
}

model Purchase {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId       Int
  item         Items     @relation(fields: [itemId], references:[id], onDelete: Cascade)
  itemId       Int
  @@index([userId])
  @@index([itemId])
}

model Record {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId       Int
  item         Items     @relation(fields: [itemId], references:[id], onDelete: Cascade)
  itemId       Int
  @@index([userId])
  @@index([itemId])
  kind         Kind
}

enum Kind {
  Purchase
  Sale
  Favorite
}